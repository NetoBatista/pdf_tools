using System.Net;
using Microsoft.Extensions.Logging;
using Moq;
using PdfTools.Constant;
using PdfTools.Dto;
using PdfTools.Service;

namespace PdfToolsTest.Service;

[TestClass]
public class PdfToTextServiceTest
{
    private const string ExampleUrl = "https://pdfobject.com/pdf/sample.pdf";
    private const string ExamplePdf = "";
    private const string ExampleImage = "iVBORw0KGgoAAAANSUhEUgAAAGEAAABNCAYAAAC2aAruAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADMSURBVHhe7dGhAcAgEMDA0v13fjwDQMSdjM2amfl46j8D95kQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEmBJgQYEKACQEb6a8Eln5Bmy8AAAAASUVORK5CYII=";
    private PdfToTextRequestDto CreateRequest()
    {
        return new PdfToTextRequestDto
        {
            Type = TypePdfToTextConstant.Base64,
            File = ExamplePdf
        };
    }

    private PdfToTextService CreateService()
    {
        var loggerMock = new Mock<ILogger<PdfToTextService>>();
        return new PdfToTextService(loggerMock.Object);
    }

    [TestMethod("Should be convert pdf base 64  to text")]
    public void ConvertPdfBase64ToTextSuccess()
    {
        var request = CreateRequest();
        var service = CreateService();

        var response = service.Execute(request);
        Assert.AreEqual(response.StatusCode, HttpStatusCode.OK);
    }

    [TestMethod("Should be convert pdf url to text")]
    public void ConvertPdfUrlToTextSuccess()
    {
        var request = new PdfToTextRequestDto
        {
            Type = TypePdfToTextConstant.Url,
            File = ExampleUrl
        };
        var service = CreateService();

        var response = service.Execute(request);
        Assert.AreEqual(response.StatusCode, HttpStatusCode.OK);
    }

    [TestMethod("Should not be convert pdf to text - Error empty content")]
    public void ConvertPdfToTextErrorEmptyContent()
    {
        var request = CreateRequest();
        request.File = string.Empty;
        var service = CreateService();

        var response = service.Execute(request);
        Assert.AreEqual(response.StatusCode, HttpStatusCode.BadRequest);
    }

    [TestMethod("Should not be convert pdf to text")]
    public void ConvertPdfToTextError()
    {
        var request = CreateRequest();
        request.File = ExampleImage;
        var service = CreateService();

        var response = service.Execute(request);
        Assert.AreEqual(response.StatusCode, HttpStatusCode.BadRequest);
    }
}